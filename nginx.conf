# HTTP: serve ACME challenge and redirect everything else to HTTPS
server {
    listen 80;
    server_name postiz.66streets.com;

    # ACME http-01 challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # redirect all other HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}


server {
    listen 80;
    server_name 66streets.com www.66streets.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name 66streets.com www.66streets.com;

    # use a cert for 66streets.com (and www if you serve it)
    ssl_certificate     /etc/nginx/certs/postiz.crt;
    ssl_certificate_key /etc/nginx/certs/postiz.key;

    root /usr/share/nginx/html;
    index index.html;

    location = / {
        try_files /index.html =404;
    }

    location = /privacy-policy.html    { try_files $uri =404; }
    location = /terms-of-service.html  { try_files $uri =404; }

    # optional: any other static files
    location / {
        try_files $uri =404;
    }
}

# HTTPS: proxy to Postiz
server {
    listen 443 ssl http2;
    server_name postiz.66streets.com;

    # Certbot-managed certs
    ssl_certificate     /etc/nginx/certs/postiz.crt;
    ssl_certificate_key /etc/nginx/certs/postiz.key;

    # Reasonable TLS defaults
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Proxy to the Postiz container
    location / {
        proxy_pass http://postiz:5000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Serve uploaded files directly if desired
    location /uploads/ {
        alias /uploads/;
        access_log off;
        expires 7d;
    }
}
